{"version":3,"sources":["FormattedRoman.js","constants/index.js","services/RomanNumerals/convertToRoman.js","services/RomanNumerals/convertFromRoman.js","services/RomanNumerals/index.js","App.js","index.js"],"names":["FormattedRoman","_ref","splitterRoman","romanNumber","split","length","react_default","a","createElement","className","DIGIT_TO_ROMAN","1","5","10","50","100","500","1000","ROMAN_TO_DIGIT","I","V","X","L","C","D","M","getBase","digit","isValidRomanNumber","test","calculateDigit","roman","chunk","toUpperCase","oldChunk","calculation","replace","index","element","slice","RomanNumerals","toRoman","digConvert","base","Math","floor","Number","isNatural","trunc","fromRoman","includes","splittedRoman","App","_useState","useState","_useState2","Object","slicedToArray","setDigit","calculatedRomanNumber","_useState3","_useState4","setRomanNumber","calculatedDigit","value","type","onChange","event","target","src_FormattedRoman","react","ReactDOM","render","src_App","document","getElementById"],"mappings":"sKAiBeA,MAff,SAAAC,GAAyC,IACjCC,EADiCD,EAAfE,YACUC,MAAM,KAExC,OAA6B,IAAzBF,EAAcG,OAEdC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYP,EAAc,IACzCA,EAAc,IAKdI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAUP,ICdtBQ,EAAiB,CAC5BC,EAAG,IACHC,EAAG,IACHC,GAAI,IACJC,GAAI,IACJC,IAAK,IACLC,IAAK,IACLC,KAAM,KAGKC,EAAiB,CAC5BC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IACHC,EAAG,IACHC,EAAG,KCXL,SAASC,EAAQC,GACf,OAAI,GAAKA,GAASA,GAAS,EAClB,EAGL,IAAMA,GAASA,GAAS,GACnB,GAGL,KAAOA,GAASA,GAAS,IACpB,IAGL,KAAQA,GAASA,GAAS,KACrB,IAGF,ICrBT,SAASC,EAAmBzB,GAC1B,MAAO,wEAAwE0B,KAC7E1B,GAIJ,SAAS2B,EAAeC,GACtB,IACIC,EADA7B,EAAc4B,EAAME,cAEpBC,EAAW,KACXC,EAAc,EAElBhC,EAAcA,EAAYiC,QAAQ,eAAgB,IAElD,IAAK,IAAIC,EAAQ,EAAGA,EAAQlC,EAAYE,OAAQgC,IAAS,CACvD,IAAMC,EAAUnC,EAAYoC,MAAMF,EAAOA,EAAQ,GAK/CF,IAHFH,EAAQd,EAAeoB,KAEVJ,EACIF,EAEAA,EAAQ,EAAIE,EAG7BA,EAAWF,EAGb,OAAOG,EAGM,IC9BAK,EAAA,CACbC,QFsBF,SAASC,EAAWf,GAClB,IACIgB,EADAxC,EAAc,GAGlB,IA5BF,SAAmBwB,GACjB,OAAOA,GAAS,GAAKiB,KAAKC,MAAMlB,KAAWmB,OAAOnB,GA2B7CoB,CAAUpB,GACb,MAAO,wBAGT,GAAIA,EAAQ,QACV,MAAO,uBAGT,KAAOA,EAAQ,GAqBb,IApBAgB,EAAOjB,EAAQC,GAEXA,GAAS,MAGXxB,EADsBuC,EADFE,KAAKI,MAAMrB,EAAQ,MAET,IAC9BA,GAAgB,KAGdA,GAAS,EAAIgB,GACfxC,GAAeO,EAAeiC,GAAQjC,EAAsB,GAAPiC,GACrDhB,GAAS,EAAIgB,GACJhB,GAAS,EAAIgB,GACtBxC,GAAeO,EAAe,EAAIiC,GAClChB,GAAS,EAAIgB,GACJhB,GAAS,EAAIgB,IACtBxC,GAAeO,EAAeiC,GAAQjC,EAAe,EAAIiC,GACzDhB,GAAS,EAAIgB,GAGRhB,GAASgB,GACdxC,GAAeO,EAAeiC,GAC9BhB,GAASgB,EAIb,OAAOxC,GE5DP8C,UD4Ba,SAAA9C,GACb,IAAKA,EAAY+C,SAAS,KACxB,OAAItB,EAAmBzB,GACd2B,EAAe3B,GAEf,kBAIX,IAAMgD,EAAgBhD,EAAYC,MAAM,KAExC,OACGwB,EAAmBuB,EAAc,KACjCvB,EAAmBuB,EAAc,IAMC,IAAnCrB,EAAeqB,EAAc,IAAarB,EAAeqB,EAAc,IAJhE,oBEHIC,MAvCf,WAAe,IAAAC,EACaC,mBAAS,SADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACN1B,EADM4B,EAAA,GACCG,EADDH,EAAA,GAEPI,EAAwBnB,EAAcC,QAAQd,GAFvCiC,EAIyBN,mBAAS,oBAJlCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAINzD,EAJM0D,EAAA,GAIOC,EAJPD,EAAA,GAKPE,EAAkBvB,EAAcS,UAAU9C,GAEhD,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SACEwD,MAAOrC,EACPsC,KAAK,SACLC,SAAU,SAAAC,GAAK,OAAIT,EAASS,EAAMC,OAAOJ,UAE3C1D,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAC6D,EAAD,CAAgBlE,YAAawD,KAE/BrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SACEwD,MAAO7D,EACP8D,KAAK,SACLC,SAAU,SAAAC,GAAK,OAAIL,EAAeK,EAAMC,OAAOJ,UAEjD1D,EAAAC,EAAAC,cAAA,kBACCL,EAAY+C,SAAS,MACpB5C,EAAAC,EAAAC,cAAC8D,EAAA,SAAD,KACEhE,EAAAC,EAAAC,cAAC6D,EAAD,CAAgBlE,YAAaA,IAC7BG,EAAAC,EAAAC,cAAA,mBAGJF,EAAAC,EAAAC,cAAA,YAAOuD,OCjCjBQ,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.a153a433.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction FormattedRoman({ romanNumber }) {\n  const splitterRoman = romanNumber.split(\"&\");\n\n  if (splitterRoman.length === 2) {\n    return (\n      <span className=\"formatted-roman\">\n        <span className=\"overline\">{splitterRoman[0]}</span>\n        {splitterRoman[1]}\n      </span>\n    );\n  }\n\n  return <span className=\"result\">{splitterRoman}</span>;\n}\n\nexport default FormattedRoman;\n","export const DIGIT_TO_ROMAN = {\n  1: \"I\",\n  5: \"V\",\n  10: \"X\",\n  50: \"L\",\n  100: \"C\",\n  500: \"D\",\n  1000: \"M\"\n};\n\nexport const ROMAN_TO_DIGIT = {\n  I: 1,\n  V: 5,\n  X: 10,\n  L: 50,\n  C: 100,\n  D: 500,\n  M: 1000\n};\n","import { DIGIT_TO_ROMAN } from \"../../constants\";\n\nfunction isNatural(digit) {\n  return digit >= 0 && Math.floor(digit) === Number(digit);\n}\n\nfunction getBase(digit) {\n  if (1 <= digit && digit <= 9) {\n    return 1;\n  }\n\n  if (10 <= digit && digit <= 99) {\n    return 10;\n  }\n\n  if (100 <= digit && digit <= 999) {\n    return 100;\n  }\n\n  if (1000 <= digit && digit <= 3999) {\n    return 1000;\n  }\n\n  return 100;\n}\n\nfunction digConvert(digit) {\n  let romanNumber = \"\";\n  let base;\n\n  if (!isNatural(digit)) {\n    return \"Is not natural number\";\n  }\n\n  if (digit > 3999999) {\n    return \"Maximum is 3 999 999\";\n  }\n\n  while (digit > 0) {\n    base = getBase(digit);\n\n    if (digit >= 4000) {\n      const integerPart = Math.trunc(digit / 1000);\n      const overlineRoman = digConvert(integerPart);\n      romanNumber = overlineRoman + \"&\";\n      digit = digit % 1000;\n    }\n\n    if (digit >= 9 * base) {\n      romanNumber += DIGIT_TO_ROMAN[base] + DIGIT_TO_ROMAN[base * 10];\n      digit -= 9 * base;\n    } else if (digit >= 5 * base) {\n      romanNumber += DIGIT_TO_ROMAN[5 * base];\n      digit -= 5 * base;\n    } else if (digit >= 4 * base) {\n      romanNumber += DIGIT_TO_ROMAN[base] + DIGIT_TO_ROMAN[5 * base];\n      digit -= 4 * base;\n    }\n\n    while (digit >= base) {\n      romanNumber += DIGIT_TO_ROMAN[base];\n      digit -= base;\n    }\n  }\n\n  return romanNumber;\n}\n\nexport default digConvert;\n","import { ROMAN_TO_DIGIT } from \"../../constants\";\n\nfunction isValidRomanNumber(romanNumber) {\n  return /^(?=[MDCLXVI])M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/.test(\n    romanNumber\n  );\n}\n\nfunction calculateDigit(roman) {\n  let romanNumber = roman.toUpperCase();\n  let chunk;\n  let oldChunk = 1001;\n  let calculation = 0;\n\n  romanNumber = romanNumber.replace(/[^IVXLCDM]/gi, \"\");\n\n  for (let index = 0; index < romanNumber.length; index++) {\n    const element = romanNumber.slice(index, index + 1);\n\n    chunk = ROMAN_TO_DIGIT[element];\n\n    if (chunk <= oldChunk) {\n      calculation += chunk;\n    } else {\n      calculation += chunk - 2 * oldChunk;\n    }\n\n    oldChunk = chunk;\n  }\n\n  return calculation;\n}\n\nexport default romanNumber => {\n  if (!romanNumber.includes(\"&\")) {\n    if (isValidRomanNumber(romanNumber)) {\n      return calculateDigit(romanNumber);\n    } else {\n      return \"Not valid Roman\";\n    }\n  }\n\n  const splittedRoman = romanNumber.split(\"&\");\n\n  if (\n    !isValidRomanNumber(splittedRoman[0]) ||\n    !isValidRomanNumber(splittedRoman[1])\n  ) {\n    return \"Not valid Roman\";\n  }\n\n  return (\n    calculateDigit(splittedRoman[0]) * 1000 + calculateDigit(splittedRoman[1])\n  );\n};\n","import convertToRoman from \"./convertToRoman\";\nimport convertFromRoman from \"./convertFromRoman\";\n\nexport default {\n  toRoman: convertToRoman,\n  fromRoman: convertFromRoman\n};\n","import React, { useState, Fragment } from \"react\";\n\nimport \"./App.css\";\nimport FormattedRoman from \"./FormattedRoman\";\nimport RomanNumerals from \"./services/RomanNumerals\";\n\nfunction App() {\n  const [digit, setDigit] = useState(3999999);\n  const calculatedRomanNumber = RomanNumerals.toRoman(digit);\n\n  const [romanNumber, setRomanNumber] = useState(\"MMMCMXCIX&CMXCIX\");\n  const calculatedDigit = RomanNumerals.fromRoman(romanNumber);\n\n  return (\n    <div className=\"App\">\n      <div className=\"converters\">\n        <div className=\"converter\">\n          <input\n            value={digit}\n            type=\"number\"\n            onChange={event => setDigit(event.target.value)}\n          />\n          <span>=></span>\n          <FormattedRoman romanNumber={calculatedRomanNumber} />\n        </div>\n        <div className=\"converter\">\n          <input\n            value={romanNumber}\n            type=\"string\"\n            onChange={event => setRomanNumber(event.target.value)}\n          />\n          <span>=></span>\n          {romanNumber.includes(\"&\") && (\n            <Fragment>\n              <FormattedRoman romanNumber={romanNumber} />\n              <span>=></span>\n            </Fragment>\n          )}\n          <span>{calculatedDigit}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}